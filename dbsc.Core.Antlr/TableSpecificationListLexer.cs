//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TableSpecificationList.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace dbsc.Core.Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TableSpecificationListLexer : Lexer {
	public const int
		T__0=1, MS_UNENCLOSED_ID_NAME=2, MS_BRACKET_ENCLOSED_ID=3, PG_UNENCLOSED_ID_NAME=4, 
		PG_QUOTE_ENCLOSED_ID=5, MYSQL_UNENCLOSED_ID=6, MYSQL_BACKTICK_ID=7, MYSQL_QUOTE_ID=8, 
		WS_NO_NEWLINE=9, NEWLINE=10, LETTER=11, NUMBER=12, WILDCARD=13, NEGATER=14, 
		CUSTOM_SELECT=15;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'"
	};
	public static readonly string[] ruleNames = {
		"T__0", "MS_UNENCLOSED_ID_NAME", "MS_BRACKET_ENCLOSED_ID", "PG_UNENCLOSED_ID_NAME", 
		"PG_QUOTE_ENCLOSED_ID", "MYSQL_UNENCLOSED_ID", "MYSQL_BACKTICK_ID", "MYSQL_QUOTE_ID", 
		"WS_NO_NEWLINE", "NEWLINE", "LETTER", "NUMBER", "WILDCARD", "NEGATER", 
		"CUSTOM_SELECT"
	};


		private IdentifierSyntax _flavor = IdentifierSyntax.SqlServer;
		public IdentifierSyntax Flavor { get { return _flavor; } set { _flavor = value; } }

		private bool _allowCustomSelect = true;
		public bool AllowCustomSelect { get { return _allowCustomSelect; } set { _allowCustomSelect = value; } }

		public TableSpecificationListLexer(ICharStream input, IdentifierSyntax flavor, bool allowCustomSelect)
			: this (input)
		{
			Flavor = flavor;
			AllowCustomSelect = allowCustomSelect;
		}


	public TableSpecificationListLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	public override string GrammarFileName { get { return "TableSpecificationList.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx, predIndex);

		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx, predIndex);

		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx, predIndex);

		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx, predIndex);

		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx, predIndex);

		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx, predIndex);

		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool MYSQL_UNENCLOSED_ID_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Flavor == IdentifierSyntax.MySql;
		}
		return true;
	}
	private bool PG_QUOTE_ENCLOSED_ID_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Flavor == IdentifierSyntax.Postgres;
		}
		return true;
	}
	private bool PG_UNENCLOSED_ID_NAME_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Flavor == IdentifierSyntax.Postgres;
		}
		return true;
	}
	private bool MYSQL_BACKTICK_ID_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Flavor == IdentifierSyntax.MySql;
		}
		return true;
	}
	private bool MS_BRACKET_ENCLOSED_ID_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Flavor == IdentifierSyntax.SqlServer;
		}
		return true;
	}
	private bool MYSQL_QUOTE_ID_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Flavor == IdentifierSyntax.MySql;
		}
		return true;
	}
	private bool MS_UNENCLOSED_ID_NAME_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Flavor == IdentifierSyntax.SqlServer;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x11\x95\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\'\n\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3-\n\x3\f\x3\xE\x3\x30\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x6\x4\x38\n\x4\r\x4\xE\x4\x39\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x5\x5\x42\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5I\n\x5\f\x5\xE\x5L\v"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x6\x6T\n\x6\r\x6\xE\x6U\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x6\a]\n\a\r\a\xE\a^\x3\a\x3\a\x3\b\x3\b\x3\b\x3"+
		"\b\x6\bg\n\b\r\b\xE\bh\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x6\tr\n\t\r"+
		"\t\xE\ts\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x5\v~\n\v\x3\v\x3\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\x8C\n\x10"+
		"\f\x10\xE\x10\x8F\v\x10\x3\x10\x6\x10\x92\n\x10\r\x10\xE\x10\x93\x2\x2"+
		"\x2\x11\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2"+
		"\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11"+
		"\x3\x2\v\x5\x2%%\x42\x42\x61\x61\x5\x2\f\f\xF\xF^_\x5\x2\f\f\xF\xF$$\b"+
		"\x2&&\x32;\x43\\\x61\x61\x63|\x82\x1\x5\x2\f\f\xF\xF\x62\x62\x4\x2\v\v"+
		"\"\"\x5\x2\x43\\\x63|\x82\x101\x3\x2\x32;\x4\x2\f\f\xF\xF\xAE\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3"+
		"\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13"+
		"\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2"+
		"\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x3!\x3\x2\x2"+
		"\x2\x5&\x3\x2\x2\x2\a\x33\x3\x2\x2\x2\t\x41\x3\x2\x2\x2\vO\x3\x2\x2\x2"+
		"\r\\\x3\x2\x2\x2\xF\x62\x3\x2\x2\x2\x11m\x3\x2\x2\x2\x13x\x3\x2\x2\x2"+
		"\x15}\x3\x2\x2\x2\x17\x81\x3\x2\x2\x2\x19\x83\x3\x2\x2\x2\x1B\x85\x3\x2"+
		"\x2\x2\x1D\x87\x3\x2\x2\x2\x1F\x89\x3\x2\x2\x2!\"\a\x30\x2\x2\"\x4\x3"+
		"\x2\x2\x2#\'\x5\x17\f\x2$\'\t\x2\x2\x2%\'\x5\x1B\xE\x2&#\x3\x2\x2\x2&"+
		"$\x3\x2\x2\x2&%\x3\x2\x2\x2\'.\x3\x2\x2\x2(-\x5\x17\f\x2)-\x5\x19\r\x2"+
		"*-\t\x2\x2\x2+-\x5\x1B\xE\x2,(\x3\x2\x2\x2,)\x3\x2\x2\x2,*\x3\x2\x2\x2"+
		",+\x3\x2\x2\x2-\x30\x3\x2\x2\x2.,\x3\x2\x2\x2./\x3\x2\x2\x2/\x31\x3\x2"+
		"\x2\x2\x30.\x3\x2\x2\x2\x31\x32\x6\x3\x2\x2\x32\x6\x3\x2\x2\x2\x33\x37"+
		"\a]\x2\x2\x34\x38\n\x3\x2\x2\x35\x36\a_\x2\x2\x36\x38\a_\x2\x2\x37\x34"+
		"\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x37\x3\x2\x2"+
		"\x2\x39:\x3\x2\x2\x2:;\x3\x2\x2\x2;<\a_\x2\x2<=\x6\x4\x3\x2=\b\x3\x2\x2"+
		"\x2>\x42\x5\x17\f\x2?\x42\a\x61\x2\x2@\x42\x5\x1B\xE\x2\x41>\x3\x2\x2"+
		"\x2\x41?\x3\x2\x2\x2\x41@\x3\x2\x2\x2\x42J\x3\x2\x2\x2\x43I\x5\x17\f\x2"+
		"\x44I\a\x61\x2\x2\x45I\x5\x19\r\x2\x46I\a&\x2\x2GI\x5\x1B\xE\x2H\x43\x3"+
		"\x2\x2\x2H\x44\x3\x2\x2\x2H\x45\x3\x2\x2\x2H\x46\x3\x2\x2\x2HG\x3\x2\x2"+
		"\x2IL\x3\x2\x2\x2JH\x3\x2\x2\x2JK\x3\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2"+
		"\x2MN\x6\x5\x4\x2N\n\x3\x2\x2\x2OS\a$\x2\x2PT\n\x4\x2\x2QR\a$\x2\x2RT"+
		"\a$\x2\x2SP\x3\x2\x2\x2SQ\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3"+
		"\x2\x2\x2VW\x3\x2\x2\x2WX\a$\x2\x2XY\x6\x6\x5\x2Y\f\x3\x2\x2\x2Z]\t\x5"+
		"\x2\x2[]\x5\x1B\xE\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2\x2]^\x3\x2\x2\x2^\\\x3"+
		"\x2\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2\x2`\x61\x6\a\x6\x2\x61\xE\x3\x2\x2"+
		"\x2\x62\x66\a\x62\x2\x2\x63g\n\x6\x2\x2\x64\x65\a\x62\x2\x2\x65g\a\x62"+
		"\x2\x2\x66\x63\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\x3\x2\x2\x2h\x66\x3\x2"+
		"\x2\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jk\a\x62\x2\x2kl\x6\b\a\x2l\x10\x3\x2"+
		"\x2\x2mq\a$\x2\x2nr\n\x4\x2\x2op\a$\x2\x2pr\a$\x2\x2qn\x3\x2\x2\x2qo\x3"+
		"\x2\x2\x2rs\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uv\a"+
		"$\x2\x2vw\x6\t\b\x2w\x12\x3\x2\x2\x2xy\t\a\x2\x2yz\x3\x2\x2\x2z{\b\n\x2"+
		"\x2{\x14\x3\x2\x2\x2|~\a\xF\x2\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\x3"+
		"\x2\x2\x2\x7F\x80\a\f\x2\x2\x80\x16\x3\x2\x2\x2\x81\x82\t\b\x2\x2\x82"+
		"\x18\x3\x2\x2\x2\x83\x84\t\t\x2\x2\x84\x1A\x3\x2\x2\x2\x85\x86\a,\x2\x2"+
		"\x86\x1C\x3\x2\x2\x2\x87\x88\a/\x2\x2\x88\x1E\x3\x2\x2\x2\x89\x8D\a<\x2"+
		"\x2\x8A\x8C\x5\x13\n\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B"+
		"\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2"+
		"\x2\x90\x92\n\n\x2\x2\x91\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x91"+
		"\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94 \x3\x2\x2\x2\x16\x2&,.\x37\x39\x41"+
		"HJSU\\^\x66hqs}\x8D\x93\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace dbsc.Core.Antlr
