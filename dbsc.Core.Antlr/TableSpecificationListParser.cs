//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TableSpecificationList.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace dbsc.Core.Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class TableSpecificationListParser : Parser {
	public const int
		T__0=1, MS_UNENCLOSED_ID_NAME=2, MS_BRACKET_ENCLOSED_ID=3, PG_UNENCLOSED_ID_NAME=4, 
		PG_QUOTE_ENCLOSED_ID=5, MYSQL_UNENCLOSED_ID=6, MYSQL_BACKTICK_ID=7, MYSQL_QUOTE_ID=8, 
		MONGO_ID=9, WS_NO_NEWLINE=10, NEWLINE=11, LETTER=12, NUMBER=13, WILDCARD=14, 
		NEGATER=15, CUSTOM_SELECT=16;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'.'", "MS_UNENCLOSED_ID_NAME", "MS_BRACKET_ENCLOSED_ID", 
		"PG_UNENCLOSED_ID_NAME", "PG_QUOTE_ENCLOSED_ID", "MYSQL_UNENCLOSED_ID", 
		"MYSQL_BACKTICK_ID", "MYSQL_QUOTE_ID", "MONGO_ID", "WS_NO_NEWLINE", "NEWLINE", 
		"LETTER", "NUMBER", "'*'", "'-'", "CUSTOM_SELECT"
	};
	public const int
		RULE_tableSpecificationList = 0, RULE_tableSpecificationLine = 1, RULE_possiblyQualifiedTableLine = 2, 
		RULE_possiblyQualifiedTable = 3, RULE_unqualifiedTable = 4, RULE_qualifiedTable = 5, 
		RULE_identifier = 6;
	public static readonly string[] ruleNames = {
		"tableSpecificationList", "tableSpecificationLine", "possiblyQualifiedTableLine", 
		"possiblyQualifiedTable", "unqualifiedTable", "qualifiedTable", "identifier"
	};

	public override string GrammarFileName { get { return "TableSpecificationList.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		private IdentifierSyntax _flavor = IdentifierSyntax.SqlServer;
		public IdentifierSyntax Flavor { get { return _flavor; } set { _flavor = value; } }

		private bool _allowCustomSelect = true;
		public bool AllowCustomSelect { get { return _allowCustomSelect; } set { _allowCustomSelect = value; } }

		public TableSpecificationListParser(ITokenStream input, IdentifierSyntax flavor, bool allowCustomSelect)
			: this (input)
		{
			Flavor = flavor;
			AllowCustomSelect = allowCustomSelect;
		}

	public TableSpecificationListParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class TableSpecificationListContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(TableSpecificationListParser.NEWLINE); }
		public ITerminalNode Eof() { return GetToken(TableSpecificationListParser.Eof, 0); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(TableSpecificationListParser.NEWLINE, i);
		}
		public TableSpecificationLineContext[] tableSpecificationLine() {
			return GetRuleContexts<TableSpecificationLineContext>();
		}
		public TableSpecificationLineContext tableSpecificationLine(int i) {
			return GetRuleContext<TableSpecificationLineContext>(i);
		}
		public TableSpecificationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSpecificationList; } }
	}

	[RuleVersion(0)]
	public TableSpecificationListContext tableSpecificationList() {
		TableSpecificationListContext _localctx = new TableSpecificationListContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_tableSpecificationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; tableSpecificationLine();
			State = 19;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 15; Match(NEWLINE);
				State = 16; tableSpecificationLine();
				}
				}
				State = 21;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 22; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSpecificationLineContext : ParserRuleContext {
		public PossiblyQualifiedTableLineContext possiblyQualifiedTableLine() {
			return GetRuleContext<PossiblyQualifiedTableLineContext>(0);
		}
		public TableSpecificationLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSpecificationLine; } }
	}

	[RuleVersion(0)]
	public TableSpecificationLineContext tableSpecificationLine() {
		TableSpecificationLineContext _localctx = new TableSpecificationLineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_tableSpecificationLine);
		try {
			State = 26;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; possiblyQualifiedTableLine();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossiblyQualifiedTableLineContext : ParserRuleContext {
		public ITerminalNode CUSTOM_SELECT() { return GetToken(TableSpecificationListParser.CUSTOM_SELECT, 0); }
		public ITerminalNode NEGATER() { return GetToken(TableSpecificationListParser.NEGATER, 0); }
		public PossiblyQualifiedTableContext possiblyQualifiedTable() {
			return GetRuleContext<PossiblyQualifiedTableContext>(0);
		}
		public PossiblyQualifiedTableLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possiblyQualifiedTableLine; } }
	}

	[RuleVersion(0)]
	public PossiblyQualifiedTableLineContext possiblyQualifiedTableLine() {
		PossiblyQualifiedTableLineContext _localctx = new PossiblyQualifiedTableLineContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_possiblyQualifiedTableLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 28; Match(NEGATER);
				}
				break;
			}
			State = 31; possiblyQualifiedTable();
			State = 33;
			_la = _input.La(1);
			if (_la==CUSTOM_SELECT) {
				{
				State = 32; Match(CUSTOM_SELECT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PossiblyQualifiedTableContext : ParserRuleContext {
		public UnqualifiedTableContext unqualifiedTable() {
			return GetRuleContext<UnqualifiedTableContext>(0);
		}
		public QualifiedTableContext qualifiedTable() {
			return GetRuleContext<QualifiedTableContext>(0);
		}
		public PossiblyQualifiedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_possiblyQualifiedTable; } }
	}

	[RuleVersion(0)]
	public PossiblyQualifiedTableContext possiblyQualifiedTable() {
		PossiblyQualifiedTableContext _localctx = new PossiblyQualifiedTableContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_possiblyQualifiedTable);
		try {
			State = 38;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; unqualifiedTable();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 36;
				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this, "Flavor.TwoPartIdentifiersSupported()");
				State = 37; qualifiedTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedTableContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnqualifiedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedTable; } }
	}

	[RuleVersion(0)]
	public UnqualifiedTableContext unqualifiedTable() {
		UnqualifiedTableContext _localctx = new UnqualifiedTableContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_unqualifiedTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedTableContext : ParserRuleContext {
		public IdentifierContext schema;
		public IdentifierContext table;
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public QualifiedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedTable; } }
	}

	[RuleVersion(0)]
	public QualifiedTableContext qualifiedTable() {
		QualifiedTableContext _localctx = new QualifiedTableContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_qualifiedTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; _localctx.schema = identifier();
			State = 43; Match(T__0);
			State = 44; _localctx.table = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode MS_UNENCLOSED_ID_NAME() { return GetToken(TableSpecificationListParser.MS_UNENCLOSED_ID_NAME, 0); }
		public ITerminalNode MONGO_ID() { return GetToken(TableSpecificationListParser.MONGO_ID, 0); }
		public ITerminalNode PG_QUOTE_ENCLOSED_ID() { return GetToken(TableSpecificationListParser.PG_QUOTE_ENCLOSED_ID, 0); }
		public ITerminalNode MYSQL_QUOTE_ID() { return GetToken(TableSpecificationListParser.MYSQL_QUOTE_ID, 0); }
		public ITerminalNode MYSQL_BACKTICK_ID() { return GetToken(TableSpecificationListParser.MYSQL_BACKTICK_ID, 0); }
		public ITerminalNode MYSQL_UNENCLOSED_ID() { return GetToken(TableSpecificationListParser.MYSQL_UNENCLOSED_ID, 0); }
		public ITerminalNode PG_UNENCLOSED_ID_NAME() { return GetToken(TableSpecificationListParser.PG_UNENCLOSED_ID_NAME, 0); }
		public ITerminalNode MS_BRACKET_ENCLOSED_ID() { return GetToken(TableSpecificationListParser.MS_BRACKET_ENCLOSED_ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			State = 62;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.SqlServer");
				State = 47; Match(MS_UNENCLOSED_ID_NAME);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.SqlServer");
				State = 49; Match(MS_BRACKET_ENCLOSED_ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.Postgres");
				State = 51; Match(PG_UNENCLOSED_ID_NAME);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 52;
				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.Postgres");
				State = 53; Match(PG_QUOTE_ENCLOSED_ID);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54;
				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.MySql");
				State = 55; Match(MYSQL_UNENCLOSED_ID);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56;
				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.MySql");
				State = 57; Match(MYSQL_BACKTICK_ID);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 58;
				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.MySql");
				State = 59; Match(MYSQL_QUOTE_ID);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 60;
				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this, "Flavor == IdentifierSyntax.Mongo");
				State = 61; Match(MONGO_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return possiblyQualifiedTable_sempred((PossiblyQualifiedTableContext)_localctx, predIndex);

		case 6: return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Flavor == IdentifierSyntax.SqlServer;

		case 2: return Flavor == IdentifierSyntax.SqlServer;

		case 3: return Flavor == IdentifierSyntax.Postgres;

		case 4: return Flavor == IdentifierSyntax.Postgres;

		case 5: return Flavor == IdentifierSyntax.MySql;

		case 6: return Flavor == IdentifierSyntax.MySql;

		case 7: return Flavor == IdentifierSyntax.MySql;

		case 8: return Flavor == IdentifierSyntax.Mongo;
		}
		return true;
	}
	private bool possiblyQualifiedTable_sempred(PossiblyQualifiedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Flavor.TwoPartIdentifiersSupported();
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x12\x43\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2"+
		"\x3\x2\x3\x2\a\x2\x14\n\x2\f\x2\xE\x2\x17\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x5\x3\x1D\n\x3\x3\x4\x5\x4 \n\x4\x3\x4\x3\x4\x5\x4$\n\x4\x3\x5\x3\x5"+
		"\x3\x5\x5\x5)\n\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x41"+
		"\n\b\x3\b\x2\x2\x2\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x2\x2G\x2"+
		"\x10\x3\x2\x2\x2\x4\x1C\x3\x2\x2\x2\x6\x1F\x3\x2\x2\x2\b(\x3\x2\x2\x2"+
		"\n*\x3\x2\x2\x2\f,\x3\x2\x2\x2\xE@\x3\x2\x2\x2\x10\x15\x5\x4\x3\x2\x11"+
		"\x12\a\r\x2\x2\x12\x14\x5\x4\x3\x2\x13\x11\x3\x2\x2\x2\x14\x17\x3\x2\x2"+
		"\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x18\x3\x2\x2\x2\x17\x15"+
		"\x3\x2\x2\x2\x18\x19\a\x2\x2\x3\x19\x3\x3\x2\x2\x2\x1A\x1D\x5\x6\x4\x2"+
		"\x1B\x1D\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1C\x1B\x3\x2\x2\x2\x1D\x5\x3"+
		"\x2\x2\x2\x1E \a\x11\x2\x2\x1F\x1E\x3\x2\x2\x2\x1F \x3\x2\x2\x2 !\x3\x2"+
		"\x2\x2!#\x5\b\x5\x2\"$\a\x12\x2\x2#\"\x3\x2\x2\x2#$\x3\x2\x2\x2$\a\x3"+
		"\x2\x2\x2%)\x5\n\x6\x2&\'\x6\x5\x2\x2\')\x5\f\a\x2(%\x3\x2\x2\x2(&\x3"+
		"\x2\x2\x2)\t\x3\x2\x2\x2*+\x5\xE\b\x2+\v\x3\x2\x2\x2,-\x5\xE\b\x2-.\a"+
		"\x3\x2\x2./\x5\xE\b\x2/\r\x3\x2\x2\x2\x30\x31\x6\b\x3\x2\x31\x41\a\x4"+
		"\x2\x2\x32\x33\x6\b\x4\x2\x33\x41\a\x5\x2\x2\x34\x35\x6\b\x5\x2\x35\x41"+
		"\a\x6\x2\x2\x36\x37\x6\b\x6\x2\x37\x41\a\a\x2\x2\x38\x39\x6\b\a\x2\x39"+
		"\x41\a\b\x2\x2:;\x6\b\b\x2;\x41\a\t\x2\x2<=\x6\b\t\x2=\x41\a\n\x2\x2>"+
		"?\x6\b\n\x2?\x41\a\v\x2\x2@\x30\x3\x2\x2\x2@\x32\x3\x2\x2\x2@\x34\x3\x2"+
		"\x2\x2@\x36\x3\x2\x2\x2@\x38\x3\x2\x2\x2@:\x3\x2\x2\x2@<\x3\x2\x2\x2@"+
		">\x3\x2\x2\x2\x41\xF\x3\x2\x2\x2\b\x15\x1C\x1F#(@";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace dbsc.Core.Antlr
