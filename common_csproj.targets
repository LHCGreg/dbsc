<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Includes MSBuild properties and targets common across all C# projects. -->
  <Import Project="$(MSBuildThisFileDirectory)common.targets"/>

  <!-- The default clean only removes files from the bin folder that it knows about. Make sure a clean totally cleans the bin folder.-->
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      ReallyCleanBinDir
    </CleanDependsOn>
  </PropertyGroup>

  <Target Name="ReallyCleanBinDir">
    <RemoveDir Directories="$(OutputPath)" Condition="Exists('$(OutputPath)')" />
  </Target>

  <!-- Can't do up-to-date checking of creating the dynamic assembly info file until SetVersionProperties has run -->
  <Target Name="CreateDynamicAssemblyInfo" DependsOnTargets="SetVersionProperties;_CreateDynamicAssemblyInfo">

  </Target>

  <Target Name="_CreateDynamicAssemblyInfo" Inputs="$(MSBuildThisFileFullPath)" Outputs="Properties\AssemblyInfo_$(Version).cs">
    <MSBuild.Community.Tasks.AssemblyInfo CodeLanguage="CS" OutputFile="Properties\AssemblyInfo_$(Version).cs"
                  AssemblyVersion="$(Version)" AssemblyFileVersion="$(Version)" />

    <!-- Don't use an <ItemGroup> because mono's xbuild doesn't support dynamic items. -->
    <CreateItem Include="Properties\AssemblyInfo_$(Version).cs">
      <Output TaskParameter="Include" ItemName="Compile"/>
    </CreateItem>
  </Target>

  <Target Name="CleanDynamicAssemblyInfo" DependsOnTargets="SetVersionProperties">
    <CreateItem Include="Properties\AssemblyInfo_*.cs">
      <Output TaskParameter="Include" ItemName="DynamicAssemblyInfoFiles" />
    </CreateItem>
    
    <Delete Files="@(DynamicAssemblyInfoFiles)" />
  </Target>

  <PropertyGroup>
    <BuildDependsOn>
      CreateDynamicAssemblyInfo;
      $(BuildDependsOn)
    </BuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      CleanDynamicAssemblyInfo
    </CleanDependsOn>
  </PropertyGroup>

  <Target Name="BuildZipPackage" DependsOnTargets="_CheckZipProperties;SetVersionProperties;Build">
    <RemoveDir Directories="ZipReleases\Staging\$(ZipNameWithoutVersion)_$(Version)" Condition="Exists('ZipReleases\Staging\$(ZipNameWithoutVersion)_$(Version)')" />

    <CreateItem Include="bin\$(Configuration)_$(Platform)\**\*" Exclude="**\*.pdb;**\*.mdb;**\*.xml;**\*vshost.exe*">
      <Output TaskParameter="Include" ItemName="BuildOutput" />
    </CreateItem>

    <Copy SourceFiles="@(BuildOutput)" DestinationFolder="ZipReleases\Staging\$(ZipNameWithoutVersion)_$(Version)\%(RecursiveDir)" />
    <MSBuild.ExtensionPack.Compression.Zip TaskAction="Create" ZipFileName="$(ZipNameWithoutVersion)_$(Version).zip" CompressPath="ZipReleases\Staging\$(ZipNameWithoutVersion)_$(Version)" />
    <Move SourceFiles="$(ZipNameWithoutVersion)_$(Version).zip" DestinationFolder="ZipReleases" />
    <RemoveDir Directories="ZipReleases\Staging" Condition="Exists('ZipReleases\Staging')" />
  </Target>

  <Target Name="_CheckZipProperties">
    <Error Condition="'$(ZipNameWithoutVersion)' == ''" Text="ZipNameWithoutVersion not set" />
  </Target>

  <Target Name="CleanZipReleases">
    <RemoveDir Directories="ZipReleases" Condition="Exists('ZipReleases')" />
  </Target>

  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      CleanZipReleases
    </CleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <PackageMaintainer>Greg Najda &lt;gregnajda@gmail.com&gt;</PackageMaintainer>
    <PackageUrl>https://github.com/lhcgreg/dbsc</PackageUrl>
  </PropertyGroup>
  
  <PropertyGroup>
    <DebSourceDir>$(MSBuildProjectDirectory)/deb/</DebSourceDir>
    <DebStagingBaseDir>$(MSBuildProjectDirectory)/deb/staging/</DebStagingBaseDir>
    <DebOutputDir>$(MSBuildProjectDirectory)/deb/bin/</DebOutputDir>
    <LintianSuppressFilePath>$(MSBuildProjectDirectory)/../linux_common/lintian_suppress.txt</LintianSuppressFilePath>
    <DebDescriptionFilePath>$(DebSourceDir)description.txt</DebDescriptionFilePath>
  </PropertyGroup>
  
  <Target Name="SetDebProperties" DependsOnTargets="CheckDebProperties;SetVersionProperties;Build">
    <!-- Don't use a <PropertyGroup> because mono's xbuild doesn't support dynamic properties. -->
    <CreateProperty Value="$(MajorVersion).$(MinorVersion).$(FixVersion)">
      <Output TaskParameter="Value" PropertyName="DebianPackageVersion" />
    </CreateProperty>
    
    <CreateProperty Value="$(DebStagingBaseDir)$(DebianPackageName)_$(DebianPackageVersion)/">
      <Output TaskParameter="Value" PropertyName="DebStagingDir" />
    </CreateProperty>
    
    <CreateItem Include="$(TargetDir)*.dll;$(TargetDir)*.exe;$(TargetDir)*.config">
      <Output TaskParameter="Include" ItemName="UsrLibPackageFiles" />
    </CreateItem>
    
    <CreateItem Include="linux_common/$(DebianPackageName)">
      <Output TaskParameter="Include" ItemName="UsrBinPackageFiles" />
    </CreateItem>

    <CreateItem Include="@(LicenseFiles)">
      <Output TaskParameter="Include" ItemName="UsrShareDocPackageFiles" />
    </CreateItem>
    
    <CreateProperty Value="$(DebOutputDir)$(DebianPackageName)_$(DebianPackageVersion).deb">
      <Output TaskParameter="Value" PropertyName="DebOutputFilePath" />
    </CreateProperty>
  </Target>
  
  <Target Name="BuildDebianPackage" DependsOnTargets="CheckDebProperties;Rebuild;SetVersionProperties;SetDebProperties">
    <!-- Copy *.dll, *.exe, *.config to deb/staging/$(DebianPackageName)_$(DebianPackageVersion)/usr/lib/$(DebianPackageName)/ -->
    <Copy SourceFiles="@(UsrLibPackageFiles)" DestinationFolder="$(DebStagingDir)usr/lib/$(DebianPackageName)/" />
    
    <!-- Copy copyright and license files to deb/staging/$(DebianPackageName)_$(DebianPackageVersion)/usr/share/doc/$(DebianPackageName)/ -->
    <Copy SourceFiles="@(UsrShareDocPackageFiles)" DestinationFolder="$(DebStagingDir)usr/share/doc/$(DebianPackageName)/" />
    
    <!-- Mark the .exe as executable as per packaging guidelines. It's not required to run it using "mono foo.exe" but it does allow
    it to be executed if the system is set to be able to execute CLR assemblies like regular binaries. -->
    <Exec Command="chmod +x $(DebStagingDir)usr/lib/$(DebianPackageName)/*.exe" />

    <!-- Mark dlls as not executable to fix a lintian warning. -->
    <Exec Command="chmod -x $(DebStagingDir)usr/lib/$(DebianPackageName)/*.dll" />
    
    <!-- Copy wrapper shell script to deb/staging/$(DebianPackageName)_$(DebianPackageVersion)usr/bin/ -->
    <Copy SourceFiles="@(UsrBinPackageFiles)" DestinationFolder="$(DebStagingDir)usr/bin/" />
    
    <MakeDir Directories="$(DebOutputDir)" />
    
    <CreateProperty Value="fpm -t deb -s dir --package $(DebOutputFilePath) --force --name $(DebianPackageName) --version $(DebianPackageVersion) --deb-priority extra --category database --architecture all --maintainer '$(PackageMaintainer)' --url '$(PackageUrl)' --vendor '' --license '' --description &quot;`cat $(DebDescriptionFilePath)`&quot; $(DebianDependencyFpmFlags) .">
      <Output TaskParameter="Value" PropertyName="fpmCommandLine" />
    </CreateProperty>
    
    <Exec Command="$(fpmCommandLine)" WorkingDirectory="$(DebStagingDir)" />

    <Exec Command="lintian --suppress-tags-from-file $(LintianSuppressFilePath) $(DebOutputFilePath)" />
  </Target>
  
  <Target Name="CheckDebProperties">
    <Error Condition="'$(DebianPackageName)' == ''" Text="DebianPackageName not set. It should be set in the .targets file for the project." />
    <Error Condition="'@(LicenseFiles)' == ''" Text="LicenseFiles not set. It should be set in the .targets file for the project." />
    <Error Condition="'$(DebianDependencyFpmFlags)' == ''" Text="DebianDependencyFpmFlags not set. It should be set in the .targets file for the project." />
  </Target>
  
  <Target Name="CleanDeb">
    <RemoveDir Directories="$(DebStagingBaseDir)" Condition="Exists('$(DebStagingBaseDir)')" />
    <RemoveDir Directories="$(DebOutputDir)" Condition="Exists('$(DebOutputDir)')" />
  </Target>
  
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      CleanDeb
    </CleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <RpmSourceDir>$(MSBuildProjectDirectory)/rpm/</RpmSourceDir>
    <RpmStagingBaseDir>$(MSBuildProjectDirectory)/rpm/staging/</RpmStagingBaseDir>
    <RpmOutputDir>$(MsBuildProjectDirectory)/rpm/bin/</RpmOutputDir>
    <RpmDescriptionFilePath>$(RpmSourceDir)description.txt</RpmDescriptionFilePath>
    <RpmGroup>Development/Tools</RpmGroup>
    <RpmlintSuppressFilePath>$(MSBuildProjectDirectory)/../linux_common/rpmlint_suppress.txt</RpmlintSuppressFilePath>
  </PropertyGroup>

  <Target Name="CheckRpmProperties">
    <Error Condition="'$(RpmPackageName)' == ''" Text="RpmPackageName not set. It should be set in the .targets file for the project." />
    <Error Condition="'@(LicenseFiles)' == ''" Text="LicenseFiles not set. It should be set in the .targets file for the project." />
    <Error Condition="'$(RpmDependencyFpmFlags)' == ''" Text="RpmDependencyFpmFlags not set. It should be set in the .targets file for the project." />
    <Error Condition="'$(RpmLicense)' == ''" Text="RpmLicense not set. It should be set in the .targets file for the project." />
  </Target>

  <Target Name="SetRpmProperties" DependsOnTargets="CheckRpmProperties;SetVersionProperties;Build">
    <!-- Don't use a <PropertyGroup> because mono's xbuild doesn't support dynamic properties. -->
    <CreateProperty Value="$(MajorVersion).$(MinorVersion).$(FixVersion)">
      <Output TaskParameter="Value" PropertyName="RpmPackageVersion" />
    </CreateProperty>
    
    <CreateProperty Value="$(RpmStagingBaseDir)$(RpmPackageName)_$(RpmPackageVersion)/">
      <Output TaskParameter="Value" PropertyName="RpmStagingDir" />
    </CreateProperty>
    
    <CreateItem Include="$(TargetDir)*.dll;$(TargetDir)*.exe;$(TargetDir)*.config">
      <Output TaskParameter="Include" ItemName="UsrLibPackageFiles" />
    </CreateItem>
    
    <CreateItem Include="linux_common/$(RpmPackageName)">
      <Output TaskParameter="Include" ItemName="UsrBinPackageFiles" />
    </CreateItem>

    <CreateItem Include="@(LicenseFiles)">
      <Output TaskParameter="Include" ItemName="UsrShareDocPackageFiles" />
    </CreateItem>
    
    <CreateProperty Value="$(RpmOutputDir)$(RpmPackageName)-$(RpmPackageVersion).noarch.rpm">
      <Output TaskParameter="Value" PropertyName="RpmOutputFilePath" />
    </CreateProperty>
  </Target>
  
  <Target Name="BuildRpmPackage" DependsOnTargets="CheckRpmProperties;Rebuild;SetVersionProperties;SetRpmProperties">
    <!-- Copy *.dll, *.exe, *.config to rpm/staging/$(RpmPackageName)_$(RpmPackageVersion)/usr/lib/$(RpmPackageName)/ -->
    <Copy SourceFiles="@(UsrLibPackageFiles)" DestinationFolder="$(RpmStagingDir)usr/lib/$(RpmPackageName)/" />
    
    <!-- Copy copyright and license files to deb/staging/$(DebianPackageName)_$(DebianPackageVersion)/usr/share/doc/$(DebianPackageName)/ -->
    <Copy SourceFiles="@(UsrShareDocPackageFiles)" DestinationFolder="$(RpmStagingDir)usr/share/doc/$(RpmPackageName)/" />
    
    <!-- Mark the .exe as executable as per packaging guidelines. It's not required to run it using "mono foo.exe" but it does allow
    it to be executed if the system is set to be able to execute CLR assemblies like regular binaries. -->
    <Exec Command="chmod +x $(RpmStagingDir)usr/lib/$(RpmPackageName)/*.exe" />

    <!-- Mark dlls as not executable. -->
    <Exec Command="chmod -x $(RpmStagingDir)usr/lib/$(RpmPackageName)/*.dll" />
    
    <!-- Copy wrapper shell script to deb/staging/$(DebianPackageName)_$(DebianPackageVersion)usr/bin/ -->
    <Copy SourceFiles="@(UsrBinPackageFiles)" DestinationFolder="$(RpmStagingDir)usr/bin/" />
    
    <MakeDir Directories="$(RpmOutputDir)" />
    
    <CreateProperty Value="fpm -s dir -t rpm --package '$(RpmOutputFilePath)' --force --name '$(RpmPackageName)' --version '$(RpmPackageVersion)' --epoch 1 --category '$(RpmGroup)' --architecture all --maintainer '$(PackageMaintainer)' --url '$(PackageUrl)' --vendor '' --license '$(RpmLicense)' --description &quot;`cat $(RpmDescriptionFilePath)`&quot; $(RpmDependencyFpmFlags) .">
      <Output TaskParameter="Value" PropertyName="fpmCommandLine" />
    </CreateProperty>
    
    <Exec Command="$(fpmCommandLine)" WorkingDirectory="$(RpmStagingDir)" />
  
    <Exec Command="rpmlint -f '$(RpmlintSuppressFilePath)' $(RpmOutputFilePath)" />
  </Target>

  <Target Name="CleanRpm">
    <RemoveDir Directories="$(RpmStagingBaseDir)" Condition="Exists('$(RpmStagingBaseDir)')" />
    <RemoveDir Directories="$(RpmOutputDir)" Condition="Exists('$(RpmOutputDir)')" />
  </Target>
  
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      CleanRpm
    </CleanDependsOn>
  </PropertyGroup>
</Project>
